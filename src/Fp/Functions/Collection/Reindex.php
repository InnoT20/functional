<?php

declare(strict_types=1);

namespace Fp\Collection;

use Fp\Operations\ReindexOperation;
use Fp\Operations\ReindexWithKeyOperation;

use function Fp\Cast\asArray;

/**
 * Produces a new array of elements by assigning the values to keys generated by a transformation function (callback).
 *
 * ```php
 * >>> reindex([1, 'a' => 2], fn (int $value) => $value);
 * => [1 => 1, 2 => 2]
 * ```
 *
 * @template TKO of array-key
 * @template TV
 *
 * @param iterable<mixed, TV> $collection
 * @param callable(TV): TKO $callback
 * @return array<TKO, TV>
 */
function reindex(iterable $collection, callable $callback): array
{
    return asArray(ReindexOperation::of($collection)($callback));
}

/**
 * Same as {@see reindex()}, but with a transformation function which takes also the key as input.
 *
 * ```php
 * >>> reindex(['a' => 1, 'b' => 2], fn (string $key, int $value) => "{$key}-{$value}");
 * => ['a-1' => 1, 'b-2' => 2]
 * ```
 *
 * @template TKO of array-key
 * @template TK
 * @template TV
 *
 * @param iterable<TK, TV> $collection
 * @param callable(TK, TV): TKO $callback
 * @return array<TKO, TV>
 */
function reindexWithKey(iterable $collection, callable $callback): array
{
    return asArray(ReindexWithKeyOperation::of($collection)($callback));
}
