<?php

declare(strict_types=1);

namespace Fp\Collections;

/**
 * @template-covariant TV
 * @implements Seq<TV>
 *
 * @psalm-seal-methods
 * @mixin LinkedListExtensions<TV>
 *
 * @psalm-suppress InvalidTemplateParam
 */
abstract class LinkedList implements Seq
{
    /**
     * @template TVI
     *
     * @param iterable<TVI>|Collection<TVI>|NonEmptyCollection<TVI> $source
     * @return LinkedList<TVI>
     */
    public static function collect(iterable $source): LinkedList {}

    /**
     * @template TVO
     *
     * @param callable(TV): (iterable<TVO>|Collection<TVO>|NonEmptyCollection<TVO>) $callback
     * @return LinkedList<TVO>
     */
    public function flatMap(callable $callback): LinkedList {}

    /**
     * @template TVI
     *
     * @param iterable<TVI>|Collection<TVI>|NonEmptyCollection<TVI> $that
     * @return LinkedList<array{TV, TVI}>
     */
    public function zip(iterable $that): LinkedList {}

    /**
     * @template TVI
     *
     * @param iterable<TVI>|Collection<TVI>|NonEmptyCollection<TVI> $suffix
     * @return LinkedList<TV | TVI>
     */
    public function appendedAll(iterable $suffix): LinkedList {}

    /**
     * @template TVI
     *
     * @param iterable<TVI>|Collection<TVI>|NonEmptyCollection<TVI> $prefix
     * @return LinkedList<TV|TVI>
     */
    public function prependedAll(iterable $prefix): LinkedList {}
}
